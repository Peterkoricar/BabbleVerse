{"version":3,"file":"layout.js","sources":["../../../../../../src/cdk/layout/layout-module.ts","../../../../../../src/cdk/layout/media-matcher.ts","../../../../../../src/cdk/layout/breakpoints-observer.ts","../../../../../../src/cdk/layout/breakpoints.ts","../../../../../../src/cdk/layout/public-api.ts","../../../../../../src/cdk/layout/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\n\n@NgModule({})\nexport class LayoutModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\n\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\n\n/** A utility for calling matchMedia queries. */\n@Injectable({providedIn: 'root'})\nexport class MediaMatcher {\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\n  private _matchMedia: (query: string) => MediaQueryList;\n\n  constructor(private _platform: Platform) {\n    this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n      // call it from a different scope.\n      window.matchMedia.bind(window) :\n      noopMatchMedia;\n  }\n\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   */\n  matchMedia(query: string): MediaQueryList {\n    if (this._platform.WEBKIT || this._platform.BLINK) {\n      createEmptyStyleRule(query);\n    }\n    return this._matchMedia(query);\n  }\n}\n\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query: string) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head!.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query: string): MediaQueryList {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {}\n  } as any;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray} from '@angular/cdk/coercion';\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\nimport {combineLatest, concat, Observable, Observer, Subject} from 'rxjs';\nimport {debounceTime, map, skip, startWith, take, takeUntil} from 'rxjs/operators';\nimport {MediaMatcher} from './media-matcher';\n\n\n/** The current state of a layout breakpoint. */\nexport interface BreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /**\n   * A key boolean pair for each query provided to the observe method,\n   * with its current matched state.\n   */\n  breakpoints: {\n    [key: string]: boolean;\n  };\n}\n\n/** The current state of a layout breakpoint. */\ninterface InternalBreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /** The media query being to be matched */\n  query: string;\n}\n\ninterface Query {\n  observable: Observable<InternalBreakpointState>;\n  mql: MediaQueryList;\n}\n\n/** Utility for checking the matching state of @media queries. */\n@Injectable({providedIn: 'root'})\nexport class BreakpointObserver implements OnDestroy {\n  /**  A map of all media queries currently being listened for. */\n  private _queries = new Map<string, Query>();\n  /** A subject for all other observables to takeUntil based on. */\n  private readonly _destroySubject = new Subject<void>();\n\n  constructor(private _mediaMatcher: MediaMatcher, private _zone: NgZone) {}\n\n  /** Completes the active subject, signalling to all other observables to complete. */\n  ngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param value One or more media queries to check.\n   * @returns Whether any of the media queries match.\n   */\n  isMatched(value: string | readonly string[]): boolean {\n    const queries = splitQueries(coerceArray(value));\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @param value One or more media queries to check.\n   * @returns A stream of matches for the given queries.\n   */\n  observe(value: string | readonly string[]): Observable<BreakpointState> {\n    const queries = splitQueries(coerceArray(value));\n    const observables = queries.map(query => this._registerQuery(query).observable);\n\n    let stateObservable = combineLatest(observables);\n    // Emit the first state immediately, and then debounce the subsequent emissions.\n    stateObservable = concat(\n      stateObservable.pipe(take(1)),\n      stateObservable.pipe(skip(1), debounceTime(0)));\n    return stateObservable.pipe(map(breakpointStates => {\n      const response: BreakpointState = {\n        matches: false,\n        breakpoints: {},\n      };\n      breakpointStates.forEach(({matches, query}) => {\n        response.matches = response.matches || matches;\n        response.breakpoints[query] = matches;\n      });\n      return response;\n    }));\n  }\n\n  /** Registers a specific query to be listened for. */\n  private _registerQuery(query: string): Query {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return this._queries.get(query)!;\n    }\n\n    const mql = this._mediaMatcher.matchMedia(query);\n\n    // Create callback for match changes and add it is as a listener.\n    const queryObservable = new Observable((observer: Observer<MediaQueryList>) => {\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      const handler = (e: any) => this._zone.run(() => observer.next(e));\n      mql.addListener(handler);\n\n      return () => {\n        mql.removeListener(handler);\n      };\n    }).pipe(\n      startWith(mql),\n      map(({matches}) => ({query, matches})),\n      takeUntil(this._destroySubject)\n    );\n\n    // Add the MediaQueryList to the set of queries.\n    const output = {observable: queryObservable, mql};\n    this._queries.set(query, output);\n    return output;\n  }\n}\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries: readonly string[]): readonly string[] {\n  return queries.map(query => query.split(','))\n                .reduce((a1, a2) => a1.concat(a2))\n                .map(query => query.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nexport const Breakpoints = {\n  XSmall: '(max-width: 599.98px)',\n  Small: '(min-width: 600px) and (max-width: 959.98px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n  XLarge: '(min-width: 1920px)',\n\n  Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n           '(max-width: 959.98px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n          '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' +\n       '(min-width: 1280px) and (orientation: landscape)',\n\n  HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n\n  HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {LayoutModule} from './layout-module';\nexport {BreakpointObserver, BreakpointState} from './breakpoints-observer';\nexport {Breakpoints} from './breakpoints';\nexport {MediaMatcher} from './media-matcher';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}