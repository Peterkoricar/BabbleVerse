{"version":3,"file":"row.d.ts","sources":["row.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { IterableChanges, IterableDiffer, IterableDiffers, OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { CanStick, CanStickCtor } from './can-stick';\r\nimport { CdkCellDef, CdkColumnDef } from './cell';\r\n/**\r\n * The row template that can be used by the mat-table. Should not be used outside of the\r\n * material library.\r\n */\r\nexport declare const CDK_ROW_TEMPLATE = \"<ng-container cdkCellOutlet></ng-container>\";\r\n/**\r\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\r\n * for changes and notifying the table.\r\n */\r\nexport declare abstract class BaseRowDef implements OnChanges {\r\n    /** @docs-private */ template: TemplateRef<any>;\r\n    protected _differs: IterableDiffers;\r\n    /** The columns to be displayed on this row. */\r\n    columns: Iterable<string>;\r\n    /** Differ used to check if any changes were made to the columns. */\r\n    protected _columnsDiffer: IterableDiffer<any>;\r\n    constructor(\r\n    /** @docs-private */ template: TemplateRef<any>, _differs: IterableDiffers);\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    /**\r\n     * Returns the difference between the current columns and the columns from the last diff, or null\r\n     * if there is no difference.\r\n     */\r\n    getColumnsDiff(): IterableChanges<any> | null;\r\n    /** Gets this row def's relevant cell template from the provided column def. */\r\n    extractCellTemplate(column: CdkColumnDef): TemplateRef<any>;\r\n}\r\n/** @docs-private */\r\ndeclare class CdkHeaderRowDefBase extends BaseRowDef {\r\n}\r\ndeclare const _CdkHeaderRowDefBase: CanStickCtor & typeof CdkHeaderRowDefBase;\r\n/**\r\n * Header row definition for the CDK table.\r\n * Captures the header row's template and other header properties such as the columns to display.\r\n */\r\nexport declare class CdkHeaderRowDef extends _CdkHeaderRowDefBase implements CanStick, OnChanges {\r\n    _table?: any;\r\n    constructor(template: TemplateRef<any>, _differs: IterableDiffers, _table?: any);\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    static ngAcceptInputType_sticky: BooleanInput;\r\n}\r\n/** @docs-private */\r\ndeclare class CdkFooterRowDefBase extends BaseRowDef {\r\n}\r\ndeclare const _CdkFooterRowDefBase: CanStickCtor & typeof CdkFooterRowDefBase;\r\n/**\r\n * Footer row definition for the CDK table.\r\n * Captures the footer row's template and other footer properties such as the columns to display.\r\n */\r\nexport declare class CdkFooterRowDef extends _CdkFooterRowDefBase implements CanStick, OnChanges {\r\n    _table?: any;\r\n    constructor(template: TemplateRef<any>, _differs: IterableDiffers, _table?: any);\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    static ngAcceptInputType_sticky: BooleanInput;\r\n}\r\n/**\r\n * Data row definition for the CDK table.\r\n * Captures the header row's template and other row properties such as the columns to display and\r\n * a when predicate that describes when this row should be used.\r\n */\r\nexport declare class CdkRowDef<T> extends BaseRowDef {\r\n    _table?: any;\r\n    /**\r\n     * Function that should return true if this row template should be used for the provided index\r\n     * and row data. If left undefined, this row will be considered the default row template to use\r\n     * when no other when functions return true for the data.\r\n     * For every row, there must be at least one when function that passes or an undefined to default.\r\n     */\r\n    when: (index: number, rowData: T) => boolean;\r\n    constructor(template: TemplateRef<any>, _differs: IterableDiffers, _table?: any);\r\n}\r\n/** Context provided to the row cells when `multiTemplateDataRows` is false */\r\nexport interface CdkCellOutletRowContext<T> {\r\n    /** Data for the row that this cell is located within. */\r\n    $implicit?: T;\r\n    /** Index of the data object in the provided data array. */\r\n    index?: number;\r\n    /** Length of the number of total rows. */\r\n    count?: number;\r\n    /** True if this cell is contained in the first row. */\r\n    first?: boolean;\r\n    /** True if this cell is contained in the last row. */\r\n    last?: boolean;\r\n    /** True if this cell is contained in a row with an even-numbered index. */\r\n    even?: boolean;\r\n    /** True if this cell is contained in a row with an odd-numbered index. */\r\n    odd?: boolean;\r\n}\r\n/**\r\n * Context provided to the row cells when `multiTemplateDataRows` is true. This context is the same\r\n * as CdkCellOutletRowContext except that the single `index` value is replaced by `dataIndex` and\r\n * `renderIndex`.\r\n */\r\nexport interface CdkCellOutletMultiRowContext<T> {\r\n    /** Data for the row that this cell is located within. */\r\n    $implicit?: T;\r\n    /** Index of the data object in the provided data array. */\r\n    dataIndex?: number;\r\n    /** Index location of the rendered row that this cell is located within. */\r\n    renderIndex?: number;\r\n    /** Length of the number of total rows. */\r\n    count?: number;\r\n    /** True if this cell is contained in the first row. */\r\n    first?: boolean;\r\n    /** True if this cell is contained in the last row. */\r\n    last?: boolean;\r\n    /** True if this cell is contained in a row with an even-numbered index. */\r\n    even?: boolean;\r\n    /** True if this cell is contained in a row with an odd-numbered index. */\r\n    odd?: boolean;\r\n}\r\n/**\r\n * Outlet for rendering cells inside of a row or header row.\r\n * @docs-private\r\n */\r\nexport declare class CdkCellOutlet implements OnDestroy {\r\n    _viewContainer: ViewContainerRef;\r\n    /** The ordered list of cells to render within this outlet's view container */\r\n    cells: CdkCellDef[];\r\n    /** The data context to be provided to each cell */\r\n    context: any;\r\n    /**\r\n     * Static property containing the latest constructed instance of this class.\r\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\r\n     * createEmbeddedView. After one of these components are created, this property will provide\r\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\r\n     * construct the cells with the provided context.\r\n     */\r\n    static mostRecentCellOutlet: CdkCellOutlet | null;\r\n    constructor(_viewContainer: ViewContainerRef);\r\n    ngOnDestroy(): void;\r\n}\r\n/** Header template container that contains the cell outlet. Adds the right class and role. */\r\nexport declare class CdkHeaderRow {\r\n}\r\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\r\nexport declare class CdkFooterRow {\r\n}\r\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\r\nexport declare class CdkRow {\r\n}\r\n/** Row that can be used to display a message when no data is shown in the table. */\r\nexport declare class CdkNoDataRow {\r\n    templateRef: TemplateRef<any>;\r\n    constructor(templateRef: TemplateRef<any>);\r\n}\r\nexport {};\r\n"]}