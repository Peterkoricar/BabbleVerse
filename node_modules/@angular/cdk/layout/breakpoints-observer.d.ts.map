{"version":3,"file":"breakpoints-observer.d.ts","sources":["breakpoints-observer.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { NgZone, OnDestroy } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { MediaMatcher } from './media-matcher';\r\n/** The current state of a layout breakpoint. */\r\nexport interface BreakpointState {\r\n    /** Whether the breakpoint is currently matching. */\r\n    matches: boolean;\r\n    /**\r\n     * A key boolean pair for each query provided to the observe method,\r\n     * with its current matched state.\r\n     */\r\n    breakpoints: {\r\n        [key: string]: boolean;\r\n    };\r\n}\r\n/** Utility for checking the matching state of @media queries. */\r\nexport declare class BreakpointObserver implements OnDestroy {\r\n    private _mediaMatcher;\r\n    private _zone;\r\n    /**  A map of all media queries currently being listened for. */\r\n    private _queries;\r\n    /** A subject for all other observables to takeUntil based on. */\r\n    private readonly _destroySubject;\r\n    constructor(_mediaMatcher: MediaMatcher, _zone: NgZone);\r\n    /** Completes the active subject, signalling to all other observables to complete. */\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Whether one or more media queries match the current viewport size.\r\n     * @param value One or more media queries to check.\r\n     * @returns Whether any of the media queries match.\r\n     */\r\n    isMatched(value: string | readonly string[]): boolean;\r\n    /**\r\n     * Gets an observable of results for the given queries that will emit new results for any changes\r\n     * in matching of the given queries.\r\n     * @param value One or more media queries to check.\r\n     * @returns A stream of matches for the given queries.\r\n     */\r\n    observe(value: string | readonly string[]): Observable<BreakpointState>;\r\n    /** Registers a specific query to be listened for. */\r\n    private _registerQuery;\r\n}\r\n"]}