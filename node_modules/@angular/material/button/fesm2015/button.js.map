{"version":3,"file":"button.js","sources":["../../../../../../src/material/button/button.ts","../../../../../../src/material/button/button-module.ts","../../../../../../src/material/button/public-api.ts","../../../../../../src/material/button/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n  AfterViewInit,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\nconst _MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(class {\n  constructor(public _elementRef: ElementRef) {}\n})));\n\n/**\n * Material design button.\n */\n@Component({\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Add a class for disabled button styling instead of the using attribute\n    // selector or pseudo-selector.  This allows users to create focusabled\n    // disabled buttons without recreating the styles.\n    '[class.mat-button-disabled]': 'disabled',\n    'class': 'mat-focus-indicator',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonBase\n    implements AfterViewInit, OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n    // Add a class that applies to all buttons. This makes it easier to target if somebody\n    // wants to target all Material buttons. We do it here rather than `host` to ensure that\n    // the class is applied to derived classes.\n    elementRef.nativeElement.classList.add('mat-button-base');\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(origin?: FocusOrigin, options?: FocusOptions): void {\n    if (origin) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-button-disabled]': 'disabled',\n    'class': 'mat-focus-indicator',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './button-module';\nexport * from './button';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}