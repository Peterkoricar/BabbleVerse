{"version":3,"file":"dialog-container.d.ts","sources":["dialog-container.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { AnimationEvent } from '@angular/animations';\r\nimport { FocusMonitor, FocusOrigin, FocusTrapFactory } from '@angular/cdk/a11y';\r\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, DomPortal, TemplatePortal } from '@angular/cdk/portal';\r\nimport { ChangeDetectorRef, ComponentRef, ElementRef, EmbeddedViewRef, EventEmitter } from '@angular/core';\r\nimport { MatDialogConfig } from './dialog-config';\r\n/** Event that captures the state of dialog container animations. */\r\ninterface DialogAnimationEvent {\r\n    state: 'opened' | 'opening' | 'closing' | 'closed';\r\n    totalTime: number;\r\n}\r\n/**\r\n * Throws an exception for the case when a ComponentPortal is\r\n * attached to a DomPortalOutlet without an origin.\r\n * @docs-private\r\n */\r\nexport declare function throwMatDialogContentAlreadyAttachedError(): void;\r\n/**\r\n * Base class for the `MatDialogContainer`. The base class does not implement\r\n * animations as these are left to implementers of the dialog container.\r\n */\r\nexport declare abstract class _MatDialogContainerBase extends BasePortalOutlet {\r\n    protected _elementRef: ElementRef;\r\n    protected _focusTrapFactory: FocusTrapFactory;\r\n    protected _changeDetectorRef: ChangeDetectorRef;\r\n    /** The dialog configuration. */\r\n    _config: MatDialogConfig;\r\n    private _focusMonitor?;\r\n    protected _document: Document;\r\n    /** The portal outlet inside of this container into which the dialog content will be loaded. */\r\n    _portalOutlet: CdkPortalOutlet;\r\n    /** The class that traps and manages focus within the dialog. */\r\n    private _focusTrap;\r\n    /** Emits when an animation state changes. */\r\n    _animationStateChanged: EventEmitter<DialogAnimationEvent>;\r\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\r\n    private _elementFocusedBeforeDialogWasOpened;\r\n    /**\r\n     * Type of interaction that led to the dialog being closed. This is used to determine\r\n     * whether the focus style will be applied when returning focus to its original location\r\n     * after the dialog is closed.\r\n     */\r\n    _closeInteractionType: FocusOrigin | null;\r\n    /** ID of the element that should be considered as the dialog's label. */\r\n    _ariaLabelledBy: string | null;\r\n    /** ID for the container DOM element. */\r\n    _id: string;\r\n    constructor(_elementRef: ElementRef, _focusTrapFactory: FocusTrapFactory, _changeDetectorRef: ChangeDetectorRef, _document: any, \r\n    /** The dialog configuration. */\r\n    _config: MatDialogConfig, _focusMonitor?: FocusMonitor | undefined);\r\n    /** Starts the dialog exit animation. */\r\n    abstract _startExitAnimation(): void;\r\n    /** Initializes the dialog container with the attached content. */\r\n    _initializeWithAttachedContent(): void;\r\n    /**\r\n     * Attach a ComponentPortal as content to this dialog container.\r\n     * @param portal Portal to be attached as the dialog content.\r\n     */\r\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\r\n    /**\r\n     * Attach a TemplatePortal as content to this dialog container.\r\n     * @param portal Portal to be attached as the dialog content.\r\n     */\r\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\r\n    /**\r\n     * Attaches a DOM portal to the dialog container.\r\n     * @param portal Portal to be attached.\r\n     * @deprecated To be turned into a method.\r\n     * @breaking-change 10.0.0\r\n     */\r\n    attachDomPortal: (portal: DomPortal) => void;\r\n    /** Moves focus back into the dialog if it was moved out. */\r\n    _recaptureFocus(): void;\r\n    /** Moves the focus inside the focus trap. */\r\n    protected _trapFocus(): void;\r\n    /** Restores focus to the element that was focused before the dialog opened. */\r\n    protected _restoreFocus(): void;\r\n    /** Sets up the focus trap. */\r\n    private _setupFocusTrap;\r\n    /** Captures the element that was focused before the dialog was opened. */\r\n    private _capturePreviouslyFocusedElement;\r\n    /** Focuses the dialog container. */\r\n    private _focusDialogContainer;\r\n    /** Returns whether focus is inside the dialog. */\r\n    private _containsFocus;\r\n}\r\n/**\r\n * Internal component that wraps user-provided dialog content.\r\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\r\n * @docs-private\r\n */\r\nexport declare class MatDialogContainer extends _MatDialogContainerBase {\r\n    /** State of the dialog animation. */\r\n    _state: 'void' | 'enter' | 'exit';\r\n    /** Callback, invoked whenever an animation on the host completes. */\r\n    _onAnimationDone({ toState, totalTime }: AnimationEvent): void;\r\n    /** Callback, invoked when an animation on the host starts. */\r\n    _onAnimationStart({ toState, totalTime }: AnimationEvent): void;\r\n    /** Starts the dialog exit animation. */\r\n    _startExitAnimation(): void;\r\n}\r\nexport {};\r\n"]}