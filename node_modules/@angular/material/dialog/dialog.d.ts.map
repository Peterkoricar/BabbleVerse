{"version":3,"file":"dialog.d.ts","sources":["dialog.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Overlay, OverlayContainer, ScrollStrategy } from '@angular/cdk/overlay';\r\nimport { ComponentType } from '@angular/cdk/portal';\r\nimport { Location } from '@angular/common';\r\nimport { InjectionToken, Injector, OnDestroy, TemplateRef, Type } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { MatDialogConfig } from './dialog-config';\r\nimport { MatDialogContainer, _MatDialogContainerBase } from './dialog-container';\r\nimport { MatDialogRef } from './dialog-ref';\r\n/** Injection token that can be used to access the data that was passed in to a dialog. */\r\nexport declare const MAT_DIALOG_DATA: InjectionToken<any>;\r\n/** Injection token that can be used to specify default dialog options. */\r\nexport declare const MAT_DIALOG_DEFAULT_OPTIONS: InjectionToken<MatDialogConfig<any>>;\r\n/** Injection token that determines the scroll handling while the dialog is open. */\r\nexport declare const MAT_DIALOG_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\r\n/** @docs-private */\r\nexport declare function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\r\n/** @docs-private */\r\nexport declare function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;\r\n/** @docs-private */\r\nexport declare const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER: {\r\n    provide: InjectionToken<() => ScrollStrategy>;\r\n    deps: (typeof Overlay)[];\r\n    useFactory: typeof MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY;\r\n};\r\n/**\r\n * Base class for dialog services. The base dialog service allows\r\n * for arbitrary dialog refs and dialog container components.\r\n */\r\nexport declare abstract class _MatDialogBase<C extends _MatDialogContainerBase> implements OnDestroy {\r\n    private _overlay;\r\n    private _injector;\r\n    private _defaultOptions;\r\n    private _parentDialog;\r\n    private _overlayContainer;\r\n    private _dialogRefConstructor;\r\n    private _dialogContainerType;\r\n    private _dialogDataToken;\r\n    private _openDialogsAtThisLevel;\r\n    private readonly _afterAllClosedAtThisLevel;\r\n    private readonly _afterOpenedAtThisLevel;\r\n    private _ariaHiddenElements;\r\n    private _scrollStrategy;\r\n    /** Keeps track of the currently-open dialogs. */\r\n    get openDialogs(): MatDialogRef<any>[];\r\n    /** Stream that emits when a dialog has been opened. */\r\n    get afterOpened(): Subject<MatDialogRef<any>>;\r\n    _getAfterAllClosed(): Subject<void>;\r\n    /**\r\n     * Stream that emits when all open dialog have finished closing.\r\n     * Will emit on subscribe if there are no open dialogs to begin with.\r\n     */\r\n    readonly afterAllClosed: Observable<void>;\r\n    constructor(_overlay: Overlay, _injector: Injector, _defaultOptions: MatDialogConfig | undefined, _parentDialog: _MatDialogBase<C> | undefined, _overlayContainer: OverlayContainer, scrollStrategy: any, _dialogRefConstructor: Type<MatDialogRef<any>>, _dialogContainerType: Type<C>, _dialogDataToken: InjectionToken<any>);\r\n    /**\r\n     * Opens a modal dialog containing the given component.\r\n     * @param component Type of the component to load into the dialog.\r\n     * @param config Extra configuration options.\r\n     * @returns Reference to the newly-opened dialog.\r\n     */\r\n    open<T, D = any, R = any>(component: ComponentType<T>, config?: MatDialogConfig<D>): MatDialogRef<T, R>;\r\n    /**\r\n     * Opens a modal dialog containing the given template.\r\n     * @param template TemplateRef to instantiate as the dialog content.\r\n     * @param config Extra configuration options.\r\n     * @returns Reference to the newly-opened dialog.\r\n     */\r\n    open<T, D = any, R = any>(template: TemplateRef<T>, config?: MatDialogConfig<D>): MatDialogRef<T, R>;\r\n    open<T, D = any, R = any>(template: ComponentType<T> | TemplateRef<T>, config?: MatDialogConfig<D>): MatDialogRef<T, R>;\r\n    /**\r\n     * Closes all of the currently-open dialogs.\r\n     */\r\n    closeAll(): void;\r\n    /**\r\n     * Finds an open dialog by its id.\r\n     * @param id ID to use when looking up the dialog.\r\n     */\r\n    getDialogById(id: string): MatDialogRef<any> | undefined;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Creates the overlay into which the dialog will be loaded.\r\n     * @param config The dialog configuration.\r\n     * @returns A promise resolving to the OverlayRef for the created overlay.\r\n     */\r\n    private _createOverlay;\r\n    /**\r\n     * Creates an overlay config from a dialog config.\r\n     * @param dialogConfig The dialog configuration.\r\n     * @returns The overlay configuration.\r\n     */\r\n    private _getOverlayConfig;\r\n    /**\r\n     * Attaches a dialog container to a dialog's already-created overlay.\r\n     * @param overlay Reference to the dialog's underlying overlay.\r\n     * @param config The dialog configuration.\r\n     * @returns A promise resolving to a ComponentRef for the attached container.\r\n     */\r\n    private _attachDialogContainer;\r\n    /**\r\n     * Attaches the user-provided component to the already-created dialog container.\r\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\r\n     *     or a TemplateRef to instantiate as the content.\r\n     * @param dialogContainer Reference to the wrapping dialog container.\r\n     * @param overlayRef Reference to the overlay in which the dialog resides.\r\n     * @param config The dialog configuration.\r\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\r\n     */\r\n    private _attachDialogContent;\r\n    /**\r\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\r\n     * of a dialog to close itself and, optionally, to return a value.\r\n     * @param config Config object that is used to construct the dialog.\r\n     * @param dialogRef Reference to the dialog.\r\n     * @param dialogContainer Dialog container element that wraps all of the contents.\r\n     * @returns The custom injector that can be used inside the dialog.\r\n     */\r\n    private _createInjector;\r\n    /**\r\n     * Removes a dialog from the array of open dialogs.\r\n     * @param dialogRef Dialog to be removed.\r\n     */\r\n    private _removeOpenDialog;\r\n    /**\r\n     * Hides all of the content that isn't an overlay from assistive technology.\r\n     */\r\n    private _hideNonDialogContentFromAssistiveTechnology;\r\n    /** Closes all of the dialogs in an array. */\r\n    private _closeDialogs;\r\n}\r\n/**\r\n * Service to open Material Design modal dialogs.\r\n */\r\nexport declare class MatDialog extends _MatDialogBase<MatDialogContainer> {\r\n    constructor(overlay: Overlay, injector: Injector, \r\n    /**\r\n     * @deprecated `_location` parameter to be removed.\r\n     * @breaking-change 10.0.0\r\n     */\r\n    location: Location, defaultOptions: MatDialogConfig, scrollStrategy: any, parentDialog: MatDialog, overlayContainer: OverlayContainer);\r\n}\r\n"]}