{"version":3,"file":"slider.d.ts","sources":["slider.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { BooleanInput, NumberInput } from '@angular/cdk/coercion';\r\nimport { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, NgZone, AfterViewInit } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { CanColor, CanDisable, HasTabIndex } from '@angular/material/core';\r\n/**\r\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)] and [formControl].\r\n * @docs-private\r\n */\r\nexport declare const MAT_SLIDER_VALUE_ACCESSOR: any;\r\n/** A simple change event emitted by the MatSlider component. */\r\nexport declare class MatSliderChange {\r\n    /** The MatSlider that changed. */\r\n    source: MatSlider;\r\n    /** The new value of the source slider. */\r\n    value: number | null;\r\n}\r\n/** @docs-private */\r\ndeclare const _MatSliderBase: import(\"@angular/material/core/common-behaviors/constructor\").Constructor<HasTabIndex> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<HasTabIndex> & import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanColor> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanColor> & import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanDisable> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanDisable> & {\r\n    new (_elementRef: ElementRef): {\r\n        _elementRef: ElementRef;\r\n    };\r\n};\r\n/**\r\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\r\n * behavior to the native `<input type=\"range\">` element.\r\n */\r\nexport declare class MatSlider extends _MatSliderBase implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, AfterViewInit, HasTabIndex {\r\n    private _focusMonitor;\r\n    private _changeDetectorRef;\r\n    private _dir;\r\n    private _ngZone;\r\n    _animationMode?: string | undefined;\r\n    /** Whether the slider is inverted. */\r\n    get invert(): boolean;\r\n    set invert(value: boolean);\r\n    private _invert;\r\n    /** The maximum value that the slider can have. */\r\n    get max(): number;\r\n    set max(v: number);\r\n    private _max;\r\n    /** The minimum value that the slider can have. */\r\n    get min(): number;\r\n    set min(v: number);\r\n    private _min;\r\n    /** The values at which the thumb will snap. */\r\n    get step(): number;\r\n    set step(v: number);\r\n    private _step;\r\n    /** Whether or not to show the thumb label. */\r\n    get thumbLabel(): boolean;\r\n    set thumbLabel(value: boolean);\r\n    private _thumbLabel;\r\n    /**\r\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\r\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\r\n     */\r\n    get tickInterval(): 'auto' | number;\r\n    set tickInterval(value: 'auto' | number);\r\n    private _tickInterval;\r\n    /** Value of the slider. */\r\n    get value(): number;\r\n    set value(v: number);\r\n    private _value;\r\n    /**\r\n     * Function that will be used to format the value before it is displayed\r\n     * in the thumb label. Can be used to format very large number in order\r\n     * for them to fit into the slider thumb.\r\n     */\r\n    displayWith: (value: number) => string | number;\r\n    /** Text corresponding to the slider's value. Used primarily for improved accessibility. */\r\n    valueText: string;\r\n    /** Whether the slider is vertical. */\r\n    get vertical(): boolean;\r\n    set vertical(value: boolean);\r\n    private _vertical;\r\n    /** Event emitted when the slider value has changed. */\r\n    readonly change: EventEmitter<MatSliderChange>;\r\n    /** Event emitted when the slider thumb moves. */\r\n    readonly input: EventEmitter<MatSliderChange>;\r\n    /**\r\n     * Emits when the raw value of the slider changes. This is here primarily\r\n     * to facilitate the two-way binding for the `value` input.\r\n     * @docs-private\r\n     */\r\n    readonly valueChange: EventEmitter<number | null>;\r\n    /** The value to be used for display purposes. */\r\n    get displayValue(): string | number;\r\n    /** set focus to the host element */\r\n    focus(options?: FocusOptions): void;\r\n    /** blur the host element */\r\n    blur(): void;\r\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\r\n    onTouched: () => any;\r\n    /** The percentage of the slider that coincides with the value. */\r\n    get percent(): number;\r\n    private _percent;\r\n    /**\r\n     * Whether or not the thumb is sliding and what the user is using to slide it with.\r\n     * Used to determine if there should be a transition for the thumb and fill track.\r\n     */\r\n    _isSliding: 'keyboard' | 'pointer' | null;\r\n    /**\r\n     * Whether or not the slider is active (clicked or sliding).\r\n     * Used to shrink and grow the thumb as according to the Material Design spec.\r\n     */\r\n    _isActive: boolean;\r\n    /**\r\n     * Whether the axis of the slider is inverted.\r\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\r\n     */\r\n    _shouldInvertAxis(): boolean;\r\n    /** Whether the slider is at its minimum value. */\r\n    _isMinValue(): boolean;\r\n    /**\r\n     * The amount of space to leave between the slider thumb and the track fill & track background\r\n     * elements.\r\n     */\r\n    _getThumbGap(): 7 | 10 | 0;\r\n    /** CSS styles for the track background element. */\r\n    _getTrackBackgroundStyles(): {\r\n        [key: string]: string;\r\n    };\r\n    /** CSS styles for the track fill element. */\r\n    _getTrackFillStyles(): {\r\n        [key: string]: string;\r\n    };\r\n    /** CSS styles for the ticks container element. */\r\n    _getTicksContainerStyles(): {\r\n        [key: string]: string;\r\n    };\r\n    /** CSS styles for the ticks element. */\r\n    _getTicksStyles(): {\r\n        [key: string]: string;\r\n    };\r\n    _getThumbContainerStyles(): {\r\n        [key: string]: string;\r\n    };\r\n    /** The size of a tick interval as a percentage of the size of the track. */\r\n    private _tickIntervalPercent;\r\n    /** The dimensions of the slider. */\r\n    private _sliderDimensions;\r\n    private _controlValueAccessorChangeFn;\r\n    /** Decimal places to round to, based on the step amount. */\r\n    private _roundToDecimal;\r\n    /** Subscription to the Directionality change EventEmitter. */\r\n    private _dirChangeSubscription;\r\n    /** The value of the slider when the slide start event fires. */\r\n    private _valueOnSlideStart;\r\n    /** Reference to the inner slider wrapper element. */\r\n    private _sliderWrapper;\r\n    /**\r\n     * Whether mouse events should be converted to a slider position by calculating their distance\r\n     * from the right or bottom edge of the slider as opposed to the top or left.\r\n     */\r\n    _shouldInvertMouseCoords(): boolean;\r\n    /** The language direction for this slider element. */\r\n    private _getDirection;\r\n    /** Keeps track of the last pointer event that was captured by the slider. */\r\n    private _lastPointerEvent;\r\n    /** Used to subscribe to global move and end events */\r\n    protected _document: Document;\r\n    /**\r\n     * Identifier used to attribute a touch event to a particular slider.\r\n     * Will be undefined if one of the following conditions is true:\r\n     * - The user isn't dragging using a touch device.\r\n     * - The browser doesn't support `Touch.identifier`.\r\n     * - Dragging hasn't started yet.\r\n     */\r\n    private _touchId;\r\n    constructor(elementRef: ElementRef, _focusMonitor: FocusMonitor, _changeDetectorRef: ChangeDetectorRef, _dir: Directionality, tabIndex: string, _ngZone: NgZone, _document: any, _animationMode?: string | undefined);\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    _onMouseenter(): void;\r\n    _onFocus(): void;\r\n    _onBlur(): void;\r\n    _onKeydown(event: KeyboardEvent): void;\r\n    _onKeyup(): void;\r\n    /** Called when the user has put their pointer down on the slider. */\r\n    private _pointerDown;\r\n    /**\r\n     * Called when the user has moved their pointer after\r\n     * starting to drag. Bound on the document level.\r\n     */\r\n    private _pointerMove;\r\n    /** Called when the user has lifted their pointer. Bound on the document level. */\r\n    private _pointerUp;\r\n    /** Called when the window has lost focus. */\r\n    private _windowBlur;\r\n    /** Use defaultView of injected document if available or fallback to global window reference */\r\n    private _getWindow;\r\n    /**\r\n     * Binds our global move and end events. They're bound at the document level and only while\r\n     * dragging so that the user doesn't have to keep their pointer exactly over the slider\r\n     * as they're swiping across the screen.\r\n     */\r\n    private _bindGlobalEvents;\r\n    /** Removes any global event listeners that we may have added. */\r\n    private _removeGlobalEvents;\r\n    /** Increments the slider by the given number of steps (negative number decrements). */\r\n    private _increment;\r\n    /** Calculate the new value from the new physical location. The value will always be snapped. */\r\n    private _updateValueFromPosition;\r\n    /** Emits a change event if the current value is different from the last emitted value. */\r\n    private _emitChangeEvent;\r\n    /** Emits an input event when the current value is different from the last emitted value. */\r\n    private _emitInputEvent;\r\n    /** Updates the amount of space between ticks as a percentage of the width of the slider. */\r\n    private _updateTickIntervalPercent;\r\n    /** Creates a slider change object from the specified value. */\r\n    private _createChangeEvent;\r\n    /** Calculates the percentage of the slider that a value is. */\r\n    private _calculatePercentage;\r\n    /** Calculates the value a percentage of the slider corresponds to. */\r\n    private _calculateValue;\r\n    /** Return a number between two numbers. */\r\n    private _clamp;\r\n    /**\r\n     * Get the bounding client rect of the slider track element.\r\n     * The track is used rather than the native element to ignore the extra space that the thumb can\r\n     * take up.\r\n     */\r\n    private _getSliderDimensions;\r\n    /**\r\n     * Focuses the native element.\r\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\r\n     */\r\n    private _focusHostElement;\r\n    /** Blurs the native element. */\r\n    private _blurHostElement;\r\n    /**\r\n     * Sets the model value. Implemented as part of ControlValueAccessor.\r\n     * @param value\r\n     */\r\n    writeValue(value: any): void;\r\n    /**\r\n     * Registers a callback to be triggered when the value has changed.\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param fn Callback to be registered.\r\n     */\r\n    registerOnChange(fn: (value: any) => void): void;\r\n    /**\r\n     * Registers a callback to be triggered when the component is touched.\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param fn Callback to be registered.\r\n     */\r\n    registerOnTouched(fn: any): void;\r\n    /**\r\n     * Sets whether the component should be disabled.\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param isDisabled\r\n     */\r\n    setDisabledState(isDisabled: boolean): void;\r\n    static ngAcceptInputType_invert: BooleanInput;\r\n    static ngAcceptInputType_max: NumberInput;\r\n    static ngAcceptInputType_min: NumberInput;\r\n    static ngAcceptInputType_step: NumberInput;\r\n    static ngAcceptInputType_thumbLabel: BooleanInput;\r\n    static ngAcceptInputType_tickInterval: NumberInput;\r\n    static ngAcceptInputType_value: NumberInput;\r\n    static ngAcceptInputType_vertical: BooleanInput;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n    static ngAcceptInputType_tabIndex: NumberInput;\r\n}\r\nexport {};\r\n"]}