{"version":3,"file":"icon.d.ts","sources":["icon.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { AfterViewChecked, ElementRef, ErrorHandler, InjectionToken, OnDestroy, OnInit } from '@angular/core';\r\nimport { CanColor } from '@angular/material/core';\r\nimport { MatIconRegistry } from './icon-registry';\r\n/** @docs-private */\r\ndeclare const _MatIconBase: import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanColor> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanColor> & {\r\n    new (_elementRef: ElementRef): {\r\n        _elementRef: ElementRef;\r\n    };\r\n};\r\n/**\r\n * Injection token used to provide the current location to `MatIcon`.\r\n * Used to handle server-side rendering and to stub out during unit tests.\r\n * @docs-private\r\n */\r\nexport declare const MAT_ICON_LOCATION: InjectionToken<MatIconLocation>;\r\n/**\r\n * Stubbed out location for `MatIcon`.\r\n * @docs-private\r\n */\r\nexport interface MatIconLocation {\r\n    getPathname: () => string;\r\n}\r\n/** @docs-private */\r\nexport declare function MAT_ICON_LOCATION_FACTORY(): MatIconLocation;\r\n/**\r\n * Component to display an icon. It can be used in the following ways:\r\n *\r\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\r\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\r\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\r\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\r\n *   Examples:\r\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\r\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\r\n *\r\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\r\n *   component. By default the Material icons font is used as described at\r\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\r\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\r\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\r\n *   Examples:\r\n *     `<mat-icon>home</mat-icon>\r\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\r\n *\r\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\r\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\r\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\r\n *   https://fortawesome.github.io/Font-Awesome/examples/\r\n *   Example:\r\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\r\n */\r\nexport declare class MatIcon extends _MatIconBase implements OnInit, AfterViewChecked, CanColor, OnDestroy {\r\n    private _iconRegistry;\r\n    private _location;\r\n    private readonly _errorHandler;\r\n    /**\r\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\r\n     * the element the icon is contained in.\r\n     */\r\n    get inline(): boolean;\r\n    set inline(inline: boolean);\r\n    private _inline;\r\n    /** Name of the icon in the SVG icon set. */\r\n    get svgIcon(): string;\r\n    set svgIcon(value: string);\r\n    private _svgIcon;\r\n    /** Font set that the icon is a part of. */\r\n    get fontSet(): string;\r\n    set fontSet(value: string);\r\n    private _fontSet;\r\n    /** Name of an icon within a font set. */\r\n    get fontIcon(): string;\r\n    set fontIcon(value: string);\r\n    private _fontIcon;\r\n    private _previousFontSetClass;\r\n    private _previousFontIconClass;\r\n    _svgName: string | null;\r\n    _svgNamespace: string | null;\r\n    /** Keeps track of the current page path. */\r\n    private _previousPath?;\r\n    /** Keeps track of the elements and attributes that we've prefixed with the current path. */\r\n    private _elementsWithExternalReferences?;\r\n    /** Subscription to the current in-progress SVG icon request. */\r\n    private _currentIconFetch;\r\n    constructor(elementRef: ElementRef<HTMLElement>, _iconRegistry: MatIconRegistry, ariaHidden: string, _location: MatIconLocation, _errorHandler: ErrorHandler);\r\n    /**\r\n     * Splits an svgIcon binding value into its icon set and icon name components.\r\n     * Returns a 2-element array of [(icon set), (icon name)].\r\n     * The separator for the two fields is ':'. If there is no separator, an empty\r\n     * string is returned for the icon set and the entire value is returned for\r\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\r\n     * Throws an error if the name contains two or more ':' separators.\r\n     * Examples:\r\n     *   `'social:cake' -> ['social', 'cake']\r\n     *   'penguin' -> ['', 'penguin']\r\n     *   null -> ['', '']\r\n     *   'a:b:c' -> (throws Error)`\r\n     */\r\n    private _splitIconName;\r\n    ngOnInit(): void;\r\n    ngAfterViewChecked(): void;\r\n    ngOnDestroy(): void;\r\n    _usingFontIcon(): boolean;\r\n    private _setSvgElement;\r\n    private _clearSvgElement;\r\n    private _updateFontIconClasses;\r\n    /**\r\n     * Cleans up a value to be used as a fontIcon or fontSet.\r\n     * Since the value ends up being assigned as a CSS class, we\r\n     * have to trim the value and omit space-separated values.\r\n     */\r\n    private _cleanupFontValue;\r\n    /**\r\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\r\n     * reference. This is required because WebKit browsers require references to be prefixed with\r\n     * the current path, if the page has a `base` tag.\r\n     */\r\n    private _prependPathToReferences;\r\n    /**\r\n     * Caches the children of an SVG element that have `url()`\r\n     * references that we need to prefix with the current path.\r\n     */\r\n    private _cacheChildrenWithExternalReferences;\r\n    /** Sets a new SVG icon with a particular name. */\r\n    private _updateSvgIcon;\r\n    static ngAcceptInputType_inline: BooleanInput;\r\n}\r\nexport {};\r\n"]}